stages:
  - maintenance
  - build
  - migrate
  - review
  - review_preprod
  - deploy
  - sentry

# Variables to be set on group / project in gitlab variables:

# CI_DOMAIN
# CI_TOOLS_REPOSITORY_URL
# SENTRY_DSN

before_script:
  - rm -rf bin
  - git clone $CI_TOOLS_REPOSITORY_URL bin/
  - export PATH=$PATH:${PWD}/bin
  - export BUILD_NAME=${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID:-preprod}
  - export DOMAIN="${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID:-preprod}.${CI_DOMAIN}"
  - export COMPOSE_PROJECT_NAME=${BUILD_NAME}
  - cp .env-ci .env
  - echo "UID=`id -u`" >> .env
  - sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml

# Build the container (docker build, pip install, ak build...)
build:
  stage: build
  script:
    - btrfs subvolume snapshot ~gitlab-runner/builds/btrfscache_${CI_PROJECT_NAME}/odoo/src odoo/src
    - btrfs subvolume snapshot ~gitlab-runner/builds/btrfscache_${CI_PROJECT_NAME}/odoo/src odoo/external-src
    - cd odoo && ak clone && ak sparse && ak build && cd ..
    - DOCKER_BUILDKIT=1 docker-compose build
  only:
    - merge_requests
    - "{{ preprod_branch }}"

# Run the database changes (click-odoo-update or migrate marabunta)
migrate:
  stage: migrate
  script:
    - docker-compose kill
    #- echo $CI_MERGE_REQUEST_LABELS | grep keepdb || ci-getdb
    - sops -d ci-db-token > ci-db-token.env && set -o allexport; source ./ci-db-token.env; set +o allexport; ci-getdb

    # ci-getdevdb pour avoir une base vierge
    - docker-compose run odoo gosu odoo click-odoo-update
  only:
    - merge_requests
    - "{{ preprod_branch }}"

# Run the container used for the review
review:
  stage: review
  script:
    - docker-compose up -d
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    url: https://${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}.${CI_DOMAIN}
    on_stop: stop_review
  only:
    - merge_requests

# Stop the container used for the review
stop_review:
  stage: review
  script:
    - docker-compose down --rmi local --volumes
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    action: stop
  when: manual
  only:
    - merge_requests

# Start the preprod container
review_preprod:
  stage: review_preprod
  script:
    - ci-getdb
    - docker-compose up -d
  environment:
    name: preprod
    url: https://${CI_PROJECT_NAME}_preprod.${CI_DOMAIN}
  only:
    - "{{ preprod_branch }}"

# Send the docker image to the registry in order to be downloaded in prod
deploy:
  stage: deploy
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - btrfs subvolume snapshot ~gitlab-runner/builds/btrfscache_${CI_PROJECT_NAME}/odoo/src odoo/src
    - btrfs subvolume snapshot ~gitlab-runner/builds/btrfscache_${CI_PROJECT_NAME}/odoo/src odoo/external-src
    # push to repository with :branchname and :commit
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  when: manual
  only:
    - "{{ preprod_branch }}"

sentry:
  stage: sentry
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  script:
    - env | grep SENTRY > sentry.env
    - docker run --env-file sentry.env getsentry/sentry-cli info
    - export PWD=`pwd`
    - echo $PWD
    - docker run --env-file sentry.env -v $PWD:/work  getsentry/sentry-cli releases new $CI_COMMIT_SHORT_SHA --finalize
    - docker run --env-file sentry.env -v $PWD:/work  getsentry/sentry-cli releases set-commits $CI_COMMIT_SHORT_SHA --auto
  only:
    - "{{ preprod_branch }}"
  needs:
    - deploy

# To use when there is a problem with the `ak build` cache, to reset it.
# After running it, you shoud run an init and a build
delete_source_cache:
  stage: maintenance
  script:
    - sudo btrfs subvolume delete ~/builds/btrfscache_${CI_PROJECT_NAME}/odoo/external-src
    - sudo btrfs subvolume delete ~/builds/btrfscache_${CI_PROJECT_NAME}/odoo/src
    - rm -rf /home/gitlab-runner/builds/btrfscache_${CI_PROJECT_NAME}
  when: manual
  only:
    - "{{ preprod_branch }}"

# Initialize the cache, to run before using the CI machine for the first time
init_source_cache:
  stage: maintenance
  script:
    - git clone ${CI_REPOSITORY_URL} ~/builds/btrfscache_${CI_PROJECT_NAME}
    - btrfs subvolume create ~/builds/btrfscache_${CI_PROJECT_NAME}/odoo/external-src
    - btrfs subvolume create ~/builds/btrfscache_${CI_PROJECT_NAME}/odoo/src
    - cd ~/builds/btrfscache_${CI_PROJECT_NAME}/odoo/src && git init
  when: manual
  only:
    - "{{ preprod_branch }}"

# Update the cache of the src/ and external-src/ used as a base for the `ak build`
build_source_cache:
  stage: maintenance
  script:
    - cd ~/builds/btrfscache_${CI_PROJECT_NAME}/odoo && git remote set-url origin ${CI_REPOSITORY_URL} && git pull && ak build
  when: manual
  only:
    - "{{ preprod_branch }}"

# Delete the data associated with the stopped containers
# Runs automatically every night
prune_docker:
  stage: maintenance
  script:
    - docker system prune --all --volumes --force
  when: manual
  only:
    - "{{ preprod_branch }}"
