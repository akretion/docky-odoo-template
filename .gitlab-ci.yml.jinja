stages:
  - maintenance
  - lint
  - build
  - test
  - migrate
  - review
  - stop_review
  - review_preprod
  - docker_push
  - deploy
  - sentry

# Variables to be set on group / project in gitlab variables:

# CI_DOMAIN
# CI_TOOLS_REPOSITORY_URL
# SENTRY_DSN

before_script:
  - rm -rf bin
  - git clone ssh://git@gitlab.akretion.com:10022/exploitation/ci-tools -b new-infra
    bin/
  - export PATH=$PATH:${PWD}/bin
  - export DOCKER_BUILDKIT=1
  - . ~/.bash_secret_vars
  - cp .env-ci .env
  - export BUILD_NAME=${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID:-preprod}
  - export CI_DOMAIN=${CI_DOMAIN}
  - |
    cat << EOF >> .env
    UID=`id -u`
    BUILD_NAME=${BUILD_NAME}
    DOMAIN=${BUILD_NAME}.${CI_DOMAIN}
    COMPOSE_PROJECT_NAME=${BUILD_NAME}
    PGDATABASE=\${PGDATABASE:-$BUILD_NAME}
    ENCRYPTION_KEY_PREPROD=${ENCRYPTION_KEY_PREPROD}
    ODOO_REPORT_URL=http://$BUILD_NAME:8069
    EOF
  - mkdir shared

# Pre-commit lint
lint:
  stage: lint
  script:
    - pre-commit install
    - pre-commit run --all --show-diff-on-failure --verbose --color always
  only:
    - merge_requests
    - "{{ preprod_branch }}"

# Build the container (with soft bump if needed)
build:
  stage: build
  script:
    - ./bump
    - docker-compose build
  only:
    - merge_requests
    - "{{ preprod_branch }}"

test:
  stage: test
  script:
    - echo "DB_NAME=${BUILD_NAME}_test" >> .env
    # exclude product_code_unique and product_usability to install it after
    - export EXCLUDE_DEPENDENCIES=product_code_unique,product_usability
    - export MARABUNTA_MODE=demo
    - export PGDATABASE="${BUILD_NAME}_test"
    - docker-compose kill
    - ci-drop-db $PGDATABASE
    - docker-compose run odoo gosu odoo initdb ${BUILD_NAME}_test --cache-prefix
      ${CI_PROJECT_NAME:0:7}
    - docker-compose run odoo gosu odoo runtests
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS !~ /Skiptest/
    - if: $CI_COMMIT_REF_NAME == "{{ preprod_branch }}"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: shared/coverage.xml

# Run the database changes (click-odoo-update or migrate marabunta)
migrate:
  stage: migrate
  script:
    - export PGDATABASE=$BUILD_NAME
    - echo "DB_NAME=$BUILD_NAME" >> .env
    - docker-compose kill
    - ci-getdb
    - docker-compose run odoo odoo --stop-after-init
  only:
    - merge_requests
    - "{{ preprod_branch }}"

# Run the container used for the review
review:
  stage: review
  script:
    - echo "DB_NAME=$BUILD_NAME" >> .env
    # TODO reimplement fetch mr env that do no depend on cidbservice
    #- ci-fetch-mr-environment
    #- source fetch-env.txt
    #- export $(cut -d= -f1 fetch-env.txt)
    - docker-compose kill
    - docker-compose up -d
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    url: https://${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}.${CI_DOMAIN}
    on_stop: stop_review
  only:
    - merge_requests

# Stop the container used for the review
stop_review:
  stage: review
  script:
    - docker-compose down --rmi local --volumes
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    action: stop
  when: manual
  only:
    - merge_requests

# Start the preprod container
review_preprod:
  stage: review_preprod
  script:
    - echo "DB_NAME=$BUILD_NAME" >> .env
    - echo "DOMAIN=${CI_PROJECT_NAME}_preprod.${CI_DOMAIN}" >> .env
    - docker-compose kill
    - docker-compose up -d
  environment:
    name: preprod
    url: https://${CI_PROJECT_NAME}_preprod.${CI_DOMAIN}
  only:
    - "{{ preprod_branch }}"

# Send the docker image to the registry in order to be downloaded in prod
docker_push:
  stage: docker_push
  script:
    - export TAG="${CI_COMMIT_MESSAGE//Bump version /}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:$TAG
    - docker push $CI_REGISTRY_IMAGE:$TAG
  rules:
    - if: $CI_COMMIT_TITLE =~ /^Bump version/ && $CI_COMMIT_BRANCH == "{{ preprod_branch }}"

bump:
  stage: review_preprod
  script:
    - url_host=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git remote set-url origin "https://gitlab-ci-token:${CI_UPLOAD_TOKEN}@${url_host}"
    - ./bump --commit-branch $CI_COMMIT_REF_NAME
  rules:
    - if: $CI_COMMIT_TITLE !~ /^Bump version/ && $CI_COMMIT_BRANCH == "{{ preprod_branch }}"
      when: manual
  # allow_failure is needed due to gitlab issue
  # https://gitlab.com/gitlab-org/gitlab/-/issues/249524
  allow_failure: true

# TODO rework on sentry maybe merge with bump ?
sentry:
  stage: sentry
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  script:
    - env | grep SENTRY > sentry.env
    - docker run --env-file sentry.env getsentry/sentry-cli info
    - export PWD=`pwd`
    - echo $PWD
    - docker run --env-file sentry.env -v $PWD:/work  getsentry/sentry-cli releases new $CI_COMMIT_SHORT_SHA --finalize
    - docker run --env-file sentry.env -v $PWD:/work  getsentry/sentry-cli releases set-commits $CI_COMMIT_SHORT_SHA --auto
  only:
    - "{{ preprod_branch }}"
  needs:
    - deploy

# Delete the data associated with the stopped containers
# Runs automatically every night
prune_docker:
  stage: maintenance
  script:
    - docker system prune --all --volumes --force
  when: manual
  only:
    - "{{ preprod_branch }}"

# Start/Restart kwhtmltopdf
kwkhtmltopdf:
  stage: maintenance
  script:
    - docker-compose -f kwkhtmltopdf-traefik.docker-compose.yml down
    - docker-compose -f kwkhtmltopdf-traefik.docker-compose.yml up -d
  when: manual
  only:
    - "{{ preprod_branch }}"
