# Variables to be set on group / project in gitlab variables:

# CI_DOMAIN
# CI_TOOLS_REPOSITORY_URL
# SENTRY_DSN

workflow:
  # Only run the pipeline if this is the default branch or a MR
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        PIPELINE_NAME: "MR pipeline: $CI_COMMIT_BRANCH"
        IS_MR: "true"
        ENV_NAME: "$CI_MERGE_REQUEST_IID"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        PIPELINE_NAME: "default branch pipeline: $CI_COMMIT_BRANCH"
        ENV_NAME: "preprod"
    - if: $CI_COMMIT_BRANCH == "{{ odoo_version }}"
      variables:
        PIPELINE_NAME: "{{ odoo_version }} branch pipeline: $CI_COMMIT_BRANCH"
        ENV_NAME: "preprod"

variables:
  BUILD_NAME: "${CI_PROJECT_NAME}_${ENV_NAME}"
  IMAGE_NAME: "$BUILD_NAME"
  DOMAIN: "${BUILD_NAME}.${CI_DOMAIN}"

stages:
  - maintenance
{% if odoo_version >= 14.0 %}
  - lint
{% endif %}
  - build
  - test
  - refresh
  - migrate
  - review
  - stop_review
  - docker_push
  # - sentry

before_script:
  - export DOCKER_BUILDKIT=1
  - if [ -n "$NO_BUILD" ]; then export
    IMAGE_NAME="$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"; fi
  - cp .env-ci .env
  - |
    cat << EOF >> .env
    UID=`id -u`
    DB_NAME=${BUILD_NAME}
    COMPOSE_PROJECT_NAME=${BUILD_NAME}
    ENCRYPTION_KEY_PREPROD=${ENCRYPTION_KEY_PREPROD}
    EOF
  - mkdir shared
  {% if use_secret %}
  - sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml
  {% endif %}

{% if odoo_version >= 14.0 %}
# Pre-commit lint
lint:
  stage: lint
  script:
    - if [ $PYLINT == "optional" ]; then cp .pylintrc .pylintrc-mandatory && git add
      .pylintrc-mandatory && git commit -m "tmp"; fi
    - pre-commit install
    - pre-commit run --all --show-diff-on-failure --verbose --color always
  rules:
    - if: $PYLINT == "mandatory"
    - if: $PYLINT == "optional"
      allow_failure: true
  parallel:
    matrix:
      - PYLINT: [mandatory, optional]
{% endif %}

# Build the container
build:
  stage: build
  script:
    - docker-compose build --pull
  rules:
    # Do not run if $NO_BUILD var is defined
    - if: $NO_BUILD == null

# Pull the container image (instead of building it)
pull:
  stage: build
  script:
    - echo "pull image $IMAGE_NAME"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose pull
  rules:
    # Run pull only in $NO_BUILD context
    - if: $NO_BUILD != null

test:
  stage: test
  script:
    - export DB_NAME="${BUILD_NAME}_test"
    - docker-compose kill
    - dropdb --force --if-exists ${DB_NAME}
    - docker-compose run odoo initdb ${DB_NAME} --cache-prefix ${CI_PROJECT_NAME:0:7}
    - docker-compose run odoo runtests
    - sed -i "s=<source></source>=<source>/home/gitlab-runner/builds</source>=g"
      shared/coverage.xml
    - sed -i "s=/odoo/local-src=${CI_PROJECT_DIR}/odoo/local-src=g" shared/coverage.xml
    - sed -i "s=/home/gitlab-runner/builds/=builds/=g" shared/coverage.xml
  rules:
    # Run tests in MR if there is no Skiptest tag
    - if: $IS_MR == "true" && $CI_MERGE_REQUEST_LABELS !~ /Skiptest/
    # Always run test in default branch except on bump commit
    - if: $IS_MR == null && $CI_COMMIT_TITLE !~ /^Bump version/

  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: shared/coverage.xml

# Drop the database to restart from a fresh one
refresh_copy_db:
  stage: refresh
  script:
    - docker-compose kill
    - dropdb --force --if-exists $BUILD_NAME
    - createdb $BUILD_NAME -T ${CI_PROJECT_NAME}_template
  rules:
    # if keepdb tag is set this job will not run
    # if emptydb tag is set this job will not run
    - if: $CI_MERGE_REQUEST_LABELS !~ /keepdb/ && $CI_MERGE_REQUEST_LABELS !~ /emptydb/

refresh_empty_db:
  stage: refresh
  script:
    - docker-compose kill
    - dropdb --force --if-exists $BUILD_NAME
    - createdb $BUILD_NAME || true
  rules:
    # if keepdb tag is set this job will not run
    # if emptydb tag is set this job will run
    - if: $CI_MERGE_REQUEST_LABELS !~ /keepdb/ && $CI_MERGE_REQUEST_LABELS =~ /emptydb/

# Run the database changes (click-odoo-update or migrate marabunta)
update_db:
  stage: migrate
  script:
    - export PGDATABASE=$BUILD_NAME
    - echo "DB_NAME=$BUILD_NAME" >> .env
    - docker-compose kill
    # Start and stop odoo, the entrypoint will run an update if needed
    - docker-compose run odoo odoo --stop-after-init
  rules:
    # if emptydb tag is set this job will not run
    - if: $CI_MERGE_REQUEST_LABELS !~ /emptydb/
    # if keepdb is set, this job will run
    - if: $CI_MERGE_REQUEST_LABELS =~ /keepdb/

# Initialize the database (by installing a module)
init_db:
  stage: migrate
  script:
    - docker-compose kill
    - docker-compose run odoo odoo -i base --stop-after-init
    # advice: Instead of base, install a module that contains your dependencies
  rules:
    # if emptydb tag is set (and no keepdb) this job will run
    - if: $CI_MERGE_REQUEST_LABELS =~ /emptydb/ && $CI_MERGE_REQUEST_LABELS !~ /keepdb/

# Run the container used for the review
review:
  stage: review
  script:
    # TODO reimplement fetch mr env that do no depend on cidbservice
    #- ci-fetch-mr-environment
    #- source fetch-env.txt
    #- export $(cut -d= -f1 fetch-env.txt)
    - docker-compose kill
    - docker-compose up -d
  environment:
    name: test/${BUILD_NAME}
    url: https://${DOMAIN}
    on_stop: stop_review

# Stop the container used for the review
stop_review:
  stage: review
  script:
    - docker-compose down --rmi local --volumes
    - dropdb ${BUILD_NAME} --if-exist
    - dropdb ${BUILD_NAME}_test --if-exist
  environment:
    name: test/${BUILD_NAME}
    action: stop
  when: manual
  # Do no require any artifact to run properly
  dependencies: []

# Send the docker image to the registry in order to be downloaded in prod
docker_push:
  stage: docker_push
  script:
    - export TAG="${CI_COMMIT_MESSAGE//Bump version /}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:$TAG
    - docker push $CI_REGISTRY_IMAGE:$TAG
  rules:
    # Run only for Bump commits in default branch, does not run on sheduled/manually run pipelines
    - if:
        $CI_COMMIT_TITLE =~ /^Bump version/ && $IS_MR == null && $CI_PIPELINE_SOURCE ==
        "push"

# TODO rework on sentry maybe merge with bump ?
#sentry:
#  stage: sentry
#  image:
#    name: getsentry/sentry-cli
#    entrypoint: [""]
#  script:
#    - env | grep SENTRY > sentry.env
#    - docker run --env-file sentry.env getsentry/sentry-cli info
#    - export PWD=`pwd`
#    - echo $PWD
#    - docker run --env-file sentry.env -v $PWD:/work  getsentry/sentry-cli releases new $CI_COMMIT_SHORT_SHA --finalize
#    - docker run --env-file sentry.env -v $PWD:/work  getsentry/sentry-cli releases set-commits $CI_COMMIT_SHORT_SHA --auto
#  rules:
#    - if: $IS_MR == null
#  needs:
#    - docker_push

# Delete the data associated with the stopped containers
# Runs automatically every night
prune_docker:
  stage: maintenance
  script:
    - docker system prune --all --volumes --force
  when: manual
  rules:
    - if: $IS_MR == null

# Start/Restart kwhtmltopdf
kwkhtmltopdf:
  stage: maintenance
  script:
    - docker-compose -f kwkhtmltopdf-traefik.docker-compose.yml down
    - docker-compose -f kwkhtmltopdf-traefik.docker-compose.yml up -d
  when: manual
  rules:
    - if: $IS_MR == null
